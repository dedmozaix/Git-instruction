1. Выбор папки

cd путь_файла - переход в дочернюю папку
cd .. - переход в корень
ls - просмотр содержимого папки

2. Создание репозитория

mkdir название_репозитория - создание репозитория
Не забудь перейти в нее через cd!

3.Скачивание репозитория

Git clone ссылка_на_созданный_на_гите_репозиторий 	- скачивание с гита

4. Работа с репозиторием

Для любой работы с репозиторием нужны файлы, для этого прописываем git init, которая создаст в нужной директории пуспую невидимую папку с пустым файлом .git 
(если хочешь ее посмотреть пропиши ls –a  , это сделает файл видимым, а потом cd .git)

4.1 Создание файла:
Для создания файла необходимо прописать команду nano название.расширение
Далее у тебя высветится окно для записи текста-> ctrl+x ->ctrl+y ->enter  готово

4.2 Индексация файла:
Для постановки коммита файла необходимо сказать гиту, что мы работаем с ним через команду 
Git add название_файла , тем самым поставив его в коммит- кандидаты
Чтобы поставить коммит (комментарий) к файлу, нужно прописать строку:
Git commit –m “комментарий” , что дальше можно увидеть через редактор gitk

4.3 Отмена индексации:
Для отмены индексации и переходу к старой версии файла, необходимо прописать команду:
Git reset Head название_возвращаемого_файла (Head означает возвращение к последнему изменению)
Если мы хотим вернуться к состоянию коммита, то прописываем немного иную команду:
Git reset хэш_нужного_коммита название_возвращаемого_коммита
Далее можно через git status увидеть, что файл горит красным и требует индексации, но сам файл сохранен, и если его открыть через nano, то увидим последнюю ненужную версию. Для этого нужно “закрепить” результат и вернуться через git checkout название_или_хэш_коммита (см. далее) к предыдущей версии.

5. Просмотр историй коммитов

Git log - просмотр истории коммитов
Также мы можем ограничить вывод коммитов с помощью приставки:
 --max-count=число_последних_коммитов
Мы также можем форматировать вывод коммитов в одну строчку без автора и даты, но с указанием веток при помощи команды:
Git log –pretty=oneline
 И вернуть вывод всех коммитов при помощи приставки –all в команде:
 Git log –pretty=oneline –all
Можно отсортировать вывод коммитов по автору при помощи флага –author=”имя_автора”:
Git log –pretty=oneline –author=”имя_автора”
Кст классная вещь: можно не писать постоянно команду полностью, а выбирать ее через tab.
Для удаления файла через консоль прописываем индекс -d

6. Возврат к прошлому
Не зря гит хранит все наши коммиты и постоянно заставляет с ними возиться. Это необходимо, в том числе, для того, чтобы мы могли возвращаться к старым, замененным коммитам, если что то пошло не так.
Для этого есть команда, для которой необходим хэш нужного нам старого коммита (его всегда можно увидеть через log):
Git checkout хэш_коммита
На что нам консоль выведет след текст, в котором все понятно:
Note: switching to ‘4f1cd2dc96fe5bdf20de9d224015fd3f2c633d55’.

You are in ‘detached HEAD’ state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using –c with the switch command. Example:

  git switch –c <new-branch-name>

Or undo this operation with:

  git switch –

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 4f1cd2d Changings

Если посмотреть через команду ls , gitk , а также пороемся в файлах, то заметим, что последующие версии исчезли, а файлы, созданные в следующих коммитах удалились. Но не расстраивайтесь, спокойно, у нас есть УНИКАЛЬНОЕ предложение возврата коммитов в виде команды
Git checkout master
Это происходит потому, что коммиты нельзя по-настоящему удалить, можно лишь только переключаться между ними.
Удаление коммита
По сути является переходом к предыдущей версии коммита через команду:
Git revert Head –no-edit
--no-edit обязательно, тк ты попадёшь на панель из которой хз как выйти (*ps из будущего, можно выйти через команду :wq)
Устранение конфликта
Смотрим при любом конфликте на git status, он покажет нам в чем состоит ошибка. Если ошибка на откате к пред версии, то можно отменить откат с помощью команды:
Git revert --abort
Но способ лучше это зайти в конфликтный файл через nano, выйти из него и проиндексировать, смотрим на статус и все должно быть чисто.
Ps* найден выход: надо написать буквы wq 

7. Ветки

Чтобы посмотреть свои ветки нужно ввести команду git branch. 
Для создания ветки необходимо прописать команду:
Git checkout –b название_ветки
Переключение между ветками:
Git checkout название_ ветки 
Git merge
Слияние веток:
Переходим в ветку, в которую мы хотим сливать и пишем команду 
git merge название_ветки_которую_хотим_слить
Слияние веток процесс очень конфликтный, поэтому надо знать как его решать. Если при слиянии в одной ветке была одна версия файла, а в другой другая, то нужно зайти в файл и лично отредактировать (будут выведены обе версии файла из двух веток)   

8. Загрузка файлов на удаленный репозиторий

Git push загружает ветку мастера и коммиты на удаленный репозиторий
Загружать коммиты отдельных веток можно при помощи следующей команды:
Git push origin название_ветки (origin указывает на удаленный репозиторий)
Но иногда нам нужно загружать не целые файлы, а изменения. Для этого есть команда
Git pull 
Соответственно, если хоти вытянуть изменения из какой то ветки, пишем:
Git pull origin нужная_ветка


